version: '3.8'

services:
  frontend:
    container_name: RSBD_FE
    build:
      context: './RSBD_FE'
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: "http://localhost:${API_PORT_OUTSIDE}"
    ports:
      - "3000:80"
    volumes:
      - 'fe-v:/app'
      - '/app/RSBD_FE/node_modules'
    networks:
      - frontendNetwork

  api:
    container_name: RSBD_BE
    build: 
      context: ./RSBD_BE
      dockerfile: Dockerfile
      args:
        ASPNETCORE_EXPOSE_PORT: ${API_PORT_INSIDE}
    ports:
      - "${API_PORT_OUTSIDE}:${API_PORT_INSIDE}"
    environment:
      # Databases
      # EU
      DB_EU_WRITE_CS: "${DB_EU_WRITE_CS}"
      DB_EU_READ_CS: "${DB_EU_READ_CS}"
      # US
      DB_US_WRITE_CS: "${DB_US_WRITE_CS}"
      DB_US_READ_CS:  "${DB_US_READ_CS}"
      # AS
      DB_AS_WRITE_CS: "${DB_AS_WRITE_CS}"
      DB_AS_READ_CS:  "${DB_AS_READ_CS}"

      # Other
      ASPNETCORE_URLS: http://+:${API_PORT_INSIDE}
      MODE: Development
    networks:
      - backendNetwork

  # EU
  # WRITE
  eu-db-write:
    container_name: EU-DB-WRITE
    build: ./dbConfig/master
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME_MASTER}
    ports:
        - "${DB_EU_WRITE_PORT_OUTSIDE}:${DB_PORT_INSIDE}"
    networks:
      - backendNetwork
    volumes: 
      - 'eu-db-write-v:/var/lib/postgresql/data'
  
  # READ
  eu-db-read:
    container_name: EU-DB-READ
    build: ./dbConfig/slave
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
        - "${DB_EU_READ_PORT_OUTSIDE}:${DB_PORT_INSIDE}"
    networks:
      - backendNetwork
    volumes: 
      - 'eu-db-read-v:/var/lib/postgresql/data'  

  # US
  # WRITE
  us-db-write:
    container_name: US-DB-WRITE
    build: ./dbConfig/master
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME_MASTER}
    ports:
        - "${DB_US_WRITE_PORT_OUTSIDE}:${DB_PORT_INSIDE}"
    networks:
      - backendNetwork
    volumes: 
      - 'us-db-write-v:/var/lib/postgresql/data'

  # READ
  us-db-read:
    container_name: US-DB-READ
    build: ./dbConfig/slave
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
        - "${DB_US_READ_PORT_OUTSIDE}:${DB_PORT_INSIDE}"
    networks:
      - backendNetwork
    volumes: 
      - 'us-db-read-v:/var/lib/postgresql/data'  

  # AS
  # WRITE
  as-db-write:
    container_name: AS-DB-WRITE
    build: ./dbConfig/master
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME_MASTER}
    ports:
        - "${DB_AS_WRITE_PORT_OUTSIDE}:${DB_PORT_INSIDE}"
    networks:
      - backendNetwork
    volumes: 
      - 'as-db-write-v:/var/lib/postgresql/data'
  
  # READ
  as-db-read:
    container_name: AS-DB-READ
    build: ./dbConfig/slave
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
        - "${DB_AS_READ_PORT_OUTSIDE}:${DB_PORT_INSIDE}"
    networks:
      - backendNetwork
    volumes: 
      - 'as-db-read-v:/var/lib/postgresql/data'  


volumes:
  eu-db-write-v:
  eu-db-read-v:
  us-db-write-v:
  us-db-read-v:
  as-db-write-v:
  as-db-read-v:
  fe-v:

networks:
    backendNetwork:
    frontendNetwork: